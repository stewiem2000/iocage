#!/bin/sh

# See whether given command is readonly
# and therefore doesn't need root credentials
__readonly_cmd () {
    case "$1" in
        defaults|df|get|list|show|snaplist) echo "0"
            ;;
        *) echo "1"
            ;;
    esac
}

# Process command line options-------------------------
__parse_cmd () {
    while [ $# -gt 0 ] ; do
        case "$1" in
            activate)   __activate "$2"
                        exit
                ;;
            cap)        __rctl_limits "$2"
                        exit
                ;;
            clean)      __clean "$2"
                        exit
                ;;
            clone)      #__export_props "$@"
                        #__clone_jail "$2"
                        __die "cloning isn't working currently"
                        #exit
                ;;
            console)    __console "$2"
                        exit
                ;;
            create)     local _tag _hostname
                        __export_props "$@"
                        _hostname="${host_hostname}"
                        _tag="${tag}"
                        for _i in $(seq ${count}) ; do
                            unset uuid host_hostuuid host_hostname
                            uuid="$(uuidgen)"
                            host_hostuuid="${uuid}"
                            if [ "${count}" -eq 1 ] ; then
                                tag="${_tag}"
                                if [ -n "${iocset_host_hostname}" ] ; then
                                    host_hostname="${_hostname}"
                                else
                                    host_hostname="${uuid}"
                                fi
                            elif [ "${count}" -gt 1 ] ; then
                                tag="${_tag}_${_i}"
                                if [ -n "${iocset_host_hostname}" ] ; then
                                    host_hostname="${_hostname}_${_i}"
                                else
                                    host_hostname="${uuid}"
                                fi
                            fi
                            __create_jail "$@"
                        done
                        exit
                ;;
            deactivate) __deactivate "$2"
                        exit
                ;;
            defaults)   __print_defaults
                        exit
                ;;
            destroy)    if [ "$2" = "-f" ] ; then
                            export _force=1
                            shift 2
                            for _jdel in $@ ; do
                                __destroy_jail "${_jdel}"
                                unset jail_datasets uuid jail_zfs_dataset \
                                      _fulluuid_dataset _fs _jail_type
                                export jail_datasets="$(zfs list -d3 -rH -o \
                                       name ${pool}/iocage | grep -Ev \
                                       "jails$|base$|download|${pool}/iocage$|*./root")"
                            done
                        else
                            export _force=0
                            shift
                            for _jdel in $@ ; do
                                __destroy_jail "${_jdel}"
                                unset jail_datasets uuid jail_zfs_dataset \
                                      _fulluuid_dataset _fs _jail_type
                                export jail_datasets="$(zfs list -d3 -rH -o \
                                       name ${pool}/iocage | grep -Ev \
                                       "jails$|base$|download|${pool}/iocage$|*./root")"
                            done
                        fi

                        exit
                ;;
            df)         __print_disk
                        exit
                ;;
            exec)       shift
                        __exec "$@"
                        exit
                ;;
            export)        local _fulluuid _jail_type
                           _fulluuid="$(__check_name ${2})"
                           _jail_type="$(__get_jail_prop type ${_fulluuid})"
                           if [ "${_jail_type}" = "thickjail" ] ; then
                               __export_thick "$2"
                           else
                               __export "$2"
                           fi

                        exit
                ;;
            fetch)      __export_props "$@"
                        local _gitcheck=$(echo $* | grep -v "ftp" | \
                                        grep -q "/" ; echo $?)

                        # Check if the user is specifying a git plugin and also
                        # check to see if they want a thick plugin
                        if [ "${_gitcheck}" = "0" ] ; then
                            shift
                            if [ $1 = "-t" ] ; then
                                shift
                                __fetch_plugin_thick "$@"
                                exit 0
                            else
                                __fetch_plugin "$@"
                                exit 0
                            fi
                        fi

                        __fetch_release "$@"
                        exit
                ;;
            get)        __get_jail_prop "$2" "$3"
                        exit
                ;;
            help)       __help
                        exit
                ;;
            init-host)  __init_host "$2" "$3"
                        exit
                ;;
            inuse)      __rctl_inuse "$2"
                        exit
                ;;
            import)     shift
                        __import "$@"
                        __post_import_tasks "$1"
                        exit
                ;;
            limits)     __rctl_list "$2"
                        exit
                ;;
            list)       __list_jails "$2"
                        exit
                ;;
            promote)    __promote "$2"
                        exit
                ;;
            pull)       __pull "$2"
                        exit
                ;;
            push)       __push "$2"
                        exit
                ;;
            rcboot)     __rc_jails boot
                        exit
                ;;
            rcshutdown) __rc_jails shutdown
                        exit
                ;;
            reboot)    shift
                        for _j in $@ ; do
                            __reboot_jail "${_j}"
                        done
                        exit
                ;;
            reset)      __reset_jail_props "$2"
                        exit
                ;;
            restart)    shift
                        for _j in $@ ; do
                            __restart_jail "${_j}"
                        done
                        exit
                ;;
            rollback)   __rollback "$2"
                        exit
                ;;
            runtime)    __runtime "$2"
                        exit
                ;;
            set)        __export_props "$@"
                        local _jail _jail_check _fulluuid _pname _pval
                        # Hack to be able to see the last argument
                        for _last ; do
                            true
                        done

                        shift
                        # Split the input on anything that isn't a = and print
                        # the last thing awk sees
                        _jail="$(echo $@ | awk 'BEGIN { FS != "=" } \
                            ; { print $NF }')"
                        _jail_check="$(echo ${_jail} | grep "=")"

                        # If the last variable doesn't equal or the jail_check
                        # is not empty, the user did not specify a jail
                        if [ "${_last}" != "${_jail}" -o ! -z "${_jail_check}" ] ; then
                            __die "please specify a jail"
                        fi

                        # Loop through the props and call the function for each
                        _fulluuid="$(__check_name ${_jail})"
                        for _prop in "$@" ; do
                            _pname="$(echo ${_prop} | awk 'BEGIN { FS = "=" } \
                                ; { print $1 }')"
                            _pval="$(echo ${_prop} | awk 'BEGIN { FS = "=" } \
                                ; { print $2 }')"

                            if [ "${_pname} = ${_jail}" -a -z "${_pval}" ] ; then
                                continue
                            fi

                            __set_jail_prop "${_pname}=${_pval}" "${_fulluuid}"
                        done
                        exit
                ;;
            snaplist)   __snaplist "$2"
                        exit
                ;;
            snapremove) __snapremove "$2"
                        exit
                ;;
            snapshot)   __snapshot "$2" "$3"
                        exit
                ;;
            start)      shift
                        for _j in $@ ; do
                            __start_jail "${_j}"
                        done
                        exit
                ;;
            stop)       shift
                        for _j in $@ ; do
                            __stop_jail "${_j}"
                        done
                        exit
                ;;
            uncap)      __rctl_uncap "$2"
                        exit
                ;;
            update)     __update "$2" "$3"
                        exit
                ;;
            upgrade)    __export_props "$@"
                        shift
                        __upgrade "$@"
                        exit
                ;;
                *)      __usage
                        exit
                ;;
        esac
        shift
    done
}
